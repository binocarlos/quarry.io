<?php defined('SYSPATH') or die('No direct script access.');
/**
 ********************************************************************************************************************************
 *
 * JQuarry Query - we want to load some nodes please
 *
 *
 ********************************************************************************************************************************
 *
 * @filename   	classes/jquarry/query.php
 * @package    	JQuarry
 * @category   	query
 * @author     	Webkit Ltd
 * @copyright  	(c) 2005-2011 Webkit Ltd
 * @license    	http://dotxar.com/license
 *
 ******************************************************************************************************************************** 
 */
abstract class Jquarry_Query {
	
	/**
	 ********************************************************************************************************************************
	 *
	 * Static Factory
	 *
	 *
	 ********************************************************************************************************************************
	*/
	
	// shortcut to a id(454544n4n54) query)
	// and it returns the first node from the collection
	public static function idfactory($id, $options = array())
	{
		$query = self::factory("id({$id})", $options);
		
		$collection = $query->run();
		
		$node = $collection->at(0);
		
		if($node && $node->exists())
		{
			return $node;
		}
		
		return null;
	}
	
	// shortcut to run a constructor query
	public static function constructorfactory($query, $options = array())
	{
		$query = self::factory($query, $options);
		
		return $query->run();
	}
	
	public static function factory($query, $options = array())
	{
		$type = 'selector';
		
		// if its a string then its probably a selector (unless we are using <folder> syntax)
		if(is_string($query))
		{
			// we are testing for a constructor query e.g. $quarry('<folder>');
			if(preg_match('/^<(.*?)>$/', $query, $matches))
			{
				$type = 'constructor';
			}
			// this is a id query: id(343d33)
			else if(preg_match('/^id\((\w+)\)$/', $query, $matches))
			{
				$type = 'id';
			}
			// this is a JSON string [{dfdsf
			else if(preg_match('/^[\{\[]/', $query, $matches))
			{
				$type = 'json';
			}
		}
		// an object or an array are assumed to be raw node data and no database hit is needed
		// we just want the nodes back
		else if(is_object($query) || is_array($query))
		{
			$type = 'constructor';
		}
		
		$classname = Jquarry_Query::classname($type);
		
		if($query!==null && is_a($query, $classname)) { return $query; }
		
		return new $classname($query, $options);
	
	}
	
	// gives you the classname for the given name of node
	public static function classname($type)
	{
		$parts = explode('.', $type);
		$classparts = array();
		
		foreach($parts as $part)
		{
			$classparts[] = ucfirst($part);
		}
		
		$classname = 'Jquarry_Query_'.implode('_', $classparts);
		
		return $classname;
	}
	
	/**
	 ********************************************************************************************************************************
	 *
	 * Instance
	 *
	 *
	 ********************************************************************************************************************************
	*/
	
	// the source for the query
	protected $query;
	
	// are are a constructor query or not
	protected $constructor = false;
	
	// the config for this query
	protected $config = array();
	
	// the default merged into the config
	protected $_defaults = array(
		
		// the storage factory to use to spawn new nodes using this query
		'storage_driver' => 'default'
	
	);
	
	public function __construct($query = null, $config = array())
	{
		$this->query = $query;
		$this->config = array_merge($this->_defaults, $config);
		
		$this->process_config();
		$this->parse();
	}
	
	public function config($field, $value = null)
	{
		if($value!==null)
		{
			$this->config[$field] = $value;
		}
		
		return $this->config[$field];	
	}
	
	/**
	 ********************************************************************************************************************************
	 *
	 * Init
	 *
	 *
	 ********************************************************************************************************************************
	*/
	
	protected function process_config()
	{
		
	}
	
	abstract protected function parse();
	
	/**
	 ********************************************************************************************************************************
	 *
	 * tells you whether the nodes generated by this query actually exist or not
	 * (constrcutor queries make nodes that don't exist yet and the driver needs to know this)
	 *
	 *
	 ********************************************************************************************************************************
	*/
	
	abstract public function nodes_exist();
	
	
	/**
	 ********************************************************************************************************************************
	 *
	 * Run - returns the nodes
	 *
	 *
	 ********************************************************************************************************************************
	*/
	
	abstract public function run();
	
	/**
	 ********************************************************************************************************************************
	 *
	 * Internal
	 *
	 *
	 ********************************************************************************************************************************
	*/
	
	protected function storage_factory()
	{
		$factory_name = $this->config["storage_driver"];
		
		if(empty($factory_name))
		{
			$factory_name = 'default';
		}
		
		$factory_name = $factory_name == 'default' ? Kohana::$config->load('jquarry.default_storage_factory') : $factory_name;
		
		$factory = Jquarry_Storage_Factory::factory($factory_name);
		
		return $factory;
	}
	
	/**
	 ********************************************************************************************************************************
	 *
	 * If you want to run a query against an in memory tree (memory driver) then you must pass
	 * the tree into the options
	 *
	 *
	 ********************************************************************************************************************************
	*/
	
	public function memory_tree()
	{
		return $this->config('memory_tree');	
	}
	
}
